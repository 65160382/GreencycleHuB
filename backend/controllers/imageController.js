const tf = require("@tensorflow/tfjs");
const jpeg = require("jpeg-js"); // ‡πÉ‡∏ä‡πâ jpeg-js ‡πÄ‡∏û‡∏∑‡πà‡∏≠ decode ‡πÑ‡∏ü‡∏•‡πå JPEG ‡πÄ‡∏õ‡πá‡∏ô pixel data (RGB)

const URL = "https://teachablemachine.withgoogle.com/models/t2DhazXW-/";

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• (global)
let model = null;

// ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const loadModel = async () => {
  if (!model) {
    const modelUrl = URL + "model.json";
    model = await tf.loadLayersModel(modelUrl); // ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå model.json ‡∏à‡∏≤‡∏Å Teachable Machine
    // console.log("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  }
};

// ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û (Buffer) ‡πÄ‡∏õ‡πá‡∏ô Tensor ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
const imageBufferToTensor = (imageBuffer) => {
  const decoded = jpeg.decode(imageBuffer, true); // decode jpeg ‚Üí pixel data
  const imageTensor = tf.browser
    .fromPixels(decoded) // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô tensor
    .resizeBilinear([224, 224]) // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    .toFloat()
    .div(tf.scalar(255)) // üî• Normalize ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
    .expandDims(); // ‡πÄ‡∏û‡∏¥‡πà‡∏° batch dim
  return imageTensor;
};

// version ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
exports.predictImage = async (req, res) => {
  try {
    await loadModel();

    const imageBuffer = req.file.buffer;
    const inputTensor = imageBufferToTensor(imageBuffer);

    const predictionData = await model.predict(inputTensor).data(); // Float32Array ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ class (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö labels)
    const prediction = Array.from(predictionData); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Array ‡∏õ‡∏Å‡∏ï‡∏¥

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏Ç‡∏≠‡∏á label:
    const labels = ["pet", "hdpe", "can", "glass", "card", "Non-recyclable"];

    //  ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ index ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const maxIndex = prediction.indexOf(Math.max(...prediction));
    const predictedLabel = labels[maxIndex];
    // ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const maxProbability = prediction[maxIndex];

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    const percent = (maxProbability * 100).toFixed(2); // ‡∏õ‡∏±‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á

    res.json({
      label: predictedLabel,
      probabilities: percent,
    });
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
  }
};
