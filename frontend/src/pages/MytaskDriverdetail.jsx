import HeaderAdmin from "../components/Admin/HeaderAdmin";
import SidebarAdmin from "../components/Admin/SidebarAdmin";
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { MapPin, User, Phone, Mail, Clock } from "lucide-react";
import Modal from "../components/Core-UI/Modal";
import DestinationInfo from "../components/Driver/DestinationInfo";
import ConfirmWasteModal from "../components/Driver/ConfirmWasteModal";
import {
  loadNostraScript,
  initializeMap,
  drawRoute,
  clearRoute,
} from "../utils/nostraMapUtils";

const MytaskDriverdetail = () => {
  const { timeId } = useParams(); //‡∏î‡∏∂‡∏á id ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏ñ‡∏à‡∏≤‡∏Å url
  const apiUrl = import.meta.env.VITE_API_URL;
  const apiKey = import.meta.env.VITE_NOSTRA_API_KEY;
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [isOpenModal, setIsOpenModal] = useState(false);
  const [isCompelteModalOpen, setIsCompelteModalOpen] = useState(false);
  const [isTravelStarted, setIsTravelStarted] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  const [items, setItems] = useState([]); //‡πÄ‡∏Å‡πá‡∏ö ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const [currentIndex, setIscurrentIndex] = useState(0); //‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö items
  const currentItem = items?.[currentIndex]; //‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏° currentindex
  const [route, setRoute] = useState([]); //‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡πÄ‡∏•‡πâ‡∏ß

  const navigate = useNavigate();

  //test2
  const [map, setMap] = useState(null);

  //test
  const [companyLocation] = useState({
    name: "Company",
    lat: 13.288378,
    lon: 100.924359,
  });

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
  useEffect(() => {
    // http://localhost:3000/api/timetable/:id
    const fetchdata = async () => {
      const res = await fetch(`${apiUrl}/api/timetable/${timeId}`, {
        method: "GET",
        credentials: "include",
      });
      if (res.ok) {
        const data = await res.json();
        console.log("debug data:", data);
        setItems(data.mergedResult);
      }
    };
    fetchdata();
    // calculateRoute();
  }, [timeId]);

  //‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
  // useEffect(() => {
  //   if (!items.length) return;

  //   let from, to;
  //   if (currentIndex === 0) {
  //     from = companyLocation;
  //     to = items[0];
  //   } else if (currentIndex < items.length) {
  //     from = items[currentIndex - 1];
  //     to = items[currentIndex];
  //   } else {
  //     from = items[items.length - 1];
  //     to = companyLocation;
  //   }

  //   calculateRoute(from, to);
  // }, [currentIndex, items]);

  // ‡πÇ‡∏´‡∏•‡∏î script nostramap ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  // useEffect(() => {
  //   loadNostraScript(apiKey, () => {
  //     const mapInstance = initializeMap(13.288378, 100.924359);
  //     setMap(mapInstance);
  //   });
  // }, []);

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å express ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
  // const calculateRoute = async (from, to) => {
  //   try {
  //     const res = await fetch(`${apiUrl}/api/route`, {
  //       method: "POST",
  //       headers: { "Content-Type": "application/json" },
  //       credentials: "include",
  //       body: JSON.stringify({ from, to }),
  //     });
  //     if (res.ok) {
  //       const data = await res.json();
  //       console.log("debug route data:", data);
  //       // setRoute(data.routedata);

  //       if (data.results) {
  //         clearRoute();
  //         drawRoute(data.results); // ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á object
  //       }
  //     }
  //   } catch (error) {
  //     console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ", error);
  //   }
  // };

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  const handleConfirm = async () => {
    // ‡∏õ‡∏¥‡∏î modal ‡∏Å‡πà‡∏≠‡∏ô
    setIsOpenModal(false);
    setIsTravelStarted(false); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    await fetch(`${apiUrl}/api/timtabledetail/arrive/${currentItem.res_id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
    });

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‚Üí ‡πÑ‡∏õ‡∏ö‡πâ‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    if (currentIndex < items.length - 1) {
      setIscurrentIndex(currentIndex + 1);
    } else {
      console.log("‡∏à‡∏ö‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß");
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ  http://localhost:3000/api/timetable/arrive/:timeid
      await fetch(`${apiUrl}/api/timetable/arrive/${currentItem.time_id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
      });
      setIsCompelteModalOpen(true); //‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ modal ‡∏à‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    }
  };

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï timestamp ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏ñ
  const handleStartTravel = async () => {
    setIsTravelStarted(true);
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ api ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    await fetch(`${apiUrl}/api/timtabledetail/start/${currentItem.res_id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
    });
  };

  return (
    <div className="flex min-h-screen">
      {isSidebarOpen && <SidebarAdmin />}
      <div className="flex flex-col flex-1">
        <HeaderAdmin onToggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)} />
        {/* ‡∏™‡πà‡∏ß‡∏ô section content */}
        <main className="flex-1 bg-gray-50 p-6">
          {/* Header ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ */}
          <div className="flex items-center justify-between border-b pb-2 mb-4">
            <button
              onClick={() => window.history.back()}
              className="text-sm text-gray-600"
            >
              &lt; ‡∏Å‡∏•‡∏±‡∏ö
            </button>
            <div className="text-center flex-1">
              <p className="font-medium">‡∏£‡∏≠‡∏ö 9.00-12.00 ‡∏ô.</p>
              <p className="text-sm text-gray-500">1 / ? ‡∏à‡∏∏‡∏î</p>
            </div>
            {/* <button className="text-sm text-blue-600">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</button> */}
          </div>

          {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà */}
          <div
            id="map"
            className="relative overflow-hidden w-full h-72 border border-gray-300 rounded-lg mb-6 bg-white shadow-sm"
          ></div>

          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢ */}
          <DestinationInfo currentItem={currentItem} />

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å */}
          {!isTravelStarted ? (
            // üîπ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
            <button
              onClick={handleStartTravel}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-medium shadow"
            >
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
            </button>
          ) : (
            // üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
            <button
              onClick={() => setIsOpenModal(true)}
              className="w-full bg-green-600 hover:bg-green-700 text-white py-3 rounded-lg font-medium shadow"
            >
              {currentIndex === items.length - 1
                ? "‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"
                : "‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢"}
            </button>
          )}
        </main>

        {/* ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ ConfirmModal */}
        <Modal
          isOpen={isOpenModal}
          title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡∏¢‡∏∞"
          onClose={() => setIsOpenModal(false)}
          // widthClass="w-1/2"
        >
          <ConfirmWasteModal
            isOpen={isOpenModal}
            onClose={() => setIsOpenModal(false)}
            onConfirm={handleConfirm}
            currentItem={currentItem}
          />
        </Modal>

        {/* Modal ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏£‡∏≠‡∏ö */}
        <Modal
          isOpen={isCompelteModalOpen}
          onClose={() => {
            setIsCompelteModalOpen(false);
            navigate("/driver/tasks");
          }}
          // widthClass="w-96"
        >
          <div className="text-center bg-white rounded-lg ">
            <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-6 animate-pulse-once">
              {/*
          ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Icon Component ‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ ‡πÄ‡∏ä‡πà‡∏ô:
          <CheckCircleIcon className="h-10 w-10 text-green-600" />
        */}
              <svg
                className="h-10 w-10 text-green-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                ></path>
              </svg>
            </div>

            {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ */}
            <h3 className="text-2xl font-bold text-gray-800 mb-2">
              ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏ñ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! 
            </h3>

            {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
            <p className="text-gray-600 mb-4 text-md">
              ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏¢‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß **‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å!**
            </p>

            {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ô‡πâ‡∏ô‡∏¢‡πâ‡∏≥) */}
            <p className="font-extrabold text-lg text-green-700 mb-6">
              ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢!
            </p>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å */}
            <button
              onClick={() => {
                setIsCompelteModalOpen(false);
                navigate("/driver/tasks");
              }}
              className="w-full sm:w-auto px-8 py-3 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 transition duration-150 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
            >
              ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
            </button>
          </div>
        </Modal>

      </div>
    </div>
  );
};

export default MytaskDriverdetail;
